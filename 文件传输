文件传输：
一、需求：
1.c/s模式，客户端至少可以支持两个
2.客户端与服务器端有交互能力。
                    	  a.客户端可查看服务端文件。
                    	  b.服务器端删除文件
                    	  c.拷贝、新建、移动、重命名服务端文件（普通文件，目录文件）
                    	  d.多个客户端可同时下载上传文件
  二、思路：
  1.先创建完整的套接字让服务器与客户端可以建立连接。
  2.用多线程去实现对多个用户的管理。
  3.规定协议：以原来命令的名称通知服务端（ls、pwd、rm）。
//=============客户端代码============
# include <stdio.h>
# include <assert.h>
# include <stdlib.h>
# include <string.h>
# include <unistd.h>
# include <sys/socket.h>
# include <arpa/inet.h>
# include <netinet/in.h>
# include <fcntl.h>
# include <openssl/md5.h>

# define MD5_LEN 16
# define BUFF_SIZE 1024*16

void print_md5(unsigned char md[])
{
    int i=0;
    for(;i<MD5_LEN;i++)
    {
        printf("%02x",md[i]);
    }
    printf("\n");
}
char* fun_md5(int fd)
{
    MD5_CTX ctx;
    unsigned char md[MD5_LEN]= {0};
    MD5_init(&ctx);

    unsigned long len =0;
    char buff[BUFF_SIZE];
    while((len = read(fd,buff,BUFF_SIZE))>0)
    {
        MD5_Update(&ctx,buff,len);
    }
    MD5_Final(md,&ctx);
    print_md5(md);
    return md;
}
void recv_file(int sockfd,char *name)
{
    char ser_status[64]={0};
    if(recv(sockfd,ser_status,63,0)<=0)
    {
        printf("ser stop!\n");
        return;
    }
    if(strncmp(ser_status,"ok",2)!=0)
    {
        printf("%s\n",ser_status);
        return;
    }
    int size =0;
    sscanf(ser_status+3,"%d",&size);
    printf("file:%s,size:%d\n",name,size);
    int fd = open(name,O_CREAT|O_WRONLY,0600);
    if(fd == -1)
    {
        send(sockfd,"err",3,0);
        return;
    }
    send(sockfd,"ok",2,0);
    char data[512] = {0};
    int num =0;
    int curr_size =0;
    while((num = recv(sockfd,data,512,0))>0)
    {
        write(fd,data,num);
        curr_size = curr_size +num;
        float f = 100.0*curr_size/size;
        printf("down:%.2f%%\r",f);
        fflush(stdout);
        if(curr_size >= size)
        {
            break;
        }
    }
    printf("\n");
    close(fd);
}

void send_file(int sockfd,char *name)
{
    if(name == NULL)
    {
        printf("err:no filename\n");
        return;
    }
    int fd = open(name,O_RDONLY);
    if(fd == -1)
    {
        printf("err:not found file\n");
        return;
    }
    char* md =md5_fun(fd);
    char res_buff[64] = {0};
    if(recv(sockfd,res_buff,63,0)<=0)
    {
        printf("ser close!\n");
        return;
    }
    if(strncmp(res_buff,"ok",2)!=0)
    {
        sprintf(res_buff,"md5#%s",md);
        send(sockfd,res_buff,strlen(res_buff),0);
        char ser_status[32]= {0};
        if(recv(sockfd,ser_status,31,0)<=0)
        {
            return;
        }
        if (strcmp(ser_status,"MD5")==0)
        {
            printf("up:100%%\n");
            printf("up finsh\n");
            return;
        }
    int size =lseek(fd,0,SEEK_END);
    lseek(fd,0,SEEK_SET);
    //char res_buff[64]= {0};
    sprintf(res_buff,"ok#%d",size);
    send(sockfd,res_buff,strlen(res_buff),0);
    char ser_status[32] = {0};
    if(recv(sockfd,ser_status,31,0)<=0)
    {
        return;
    }
    if(strcmp(ser_status,"ok")!=0)
    {
        return;
    }
    char data[512] = {0};
    int num =0;
    int curr_size =0;
    while((num = read(fd,data,512))>0)
    {
        send(sockfd,data,num,0);
        curr_size += num;
        float f = curr_size*100.0/size;
        printf("up:%.2f%%\r",f);
        fflush(stdout);
        if(curr_size >= size)
        {
            break;
        }
    }
    printf("\n");
    close(fd);
    printf("up finish\n");
    }
}
int main()
{
    int sockfd = socket(AF_INET,SOCK_STREAM,0);
    assert(sockfd != -1);

    struct sockaddr_in saddr;
    memset(&saddr,0,sizeof(saddr));
    saddr.sin_family = AF_INET;
    saddr.sin_port = htons(6000);
    saddr.sin_addr.s_addr = inet_addr("127.0.0.1");
    int res = connect(sockfd,(struct sockaddr*)&saddr,sizeof(saddr));
    assert(res != -1);

    while(1)
    {
        char buff[128] = {0};
    
        printf("connect [yonghu~ ]$");
        fflush(stdout);
        fgets(buff,128,stdin);
        buff[strlen(buff)-1] = 0;
        if(strcmp(buff,"end,3")==0)
        {
            break;
        }
        char tmp[128] = {0};
        strcpy(tmp,buff);
        char *myargv[10] = {0};
        char *s = strtok(tmp," ");
        int i = 0;
        while(s != NULL)
        {
            myargv[i++] = s;
            s = strtok(NULL," ");
        }
        if(myargv[0] == NULL)
        {
            continue;
        }
        if(strcmp(myargv[0],"end")==0)
        {
            break;
        }
        if(strcmp(myargv[0],"get")==0)
        {
            if(myargv[1]==NULL)
            {
                printf("no filename!\n");
                continue;
            }
            send(sockfd,buff,strlen(buff),0);
            recv_file(sockfd,myargv[1]);
        }
        else if(strcmp(myargv[0],"put")==0)
        {
            if(myargv[1] == NULL)
            {
                printf("no filename!\n");
                continue;
            }
            send(sockfd,buff,strlen(buff),0);
            send_file(sockfd,myargv[1]);
        }
        else if(strcmp(myargv[0],"local")==0)
        {
            int pipefd[2];
            pipe(pipefd);
            pid_t pid = fork();
            assert(pid != -1);
            if(pid == 0)
            {
                dup2(pipefd[1],1);
                dup2(pipefd[1],2);
                execvp("ls",myargv);
                perror("execvp error");
                exit(0);
            }
            close(pipefd[1]);
            wait(NULL);
            char readbuff[1024] = {0};
            read(pipefd[0],readbuff,1023);
            printf("%s\n",readbuff);
        }
        else
        {
            send(sockfd,buff,strlen(buff),0);
            char readbuff[1024] = {0};
            if(recv(sockfd,readbuff,1023,0) <= 0)
            {
                printf("ser exit!\n");
                break;
            }
            printf("%s\n",readbuff+3);
        }
    }
    close(sockfd);
}
//========服务端代码=======
# include <stdio.h>
# include <stdlib.h>
# include <string.h>
# include <assert.h>
# include <unistd.h>
# include <sys/socket.h>
# include <netinet/in.h>
# include <arpa/inet.h>
# include "thread.h"

# define LIS_MAX 5
int create_socket()
{
    int sockfd = socket(AF_INET,SOCK_STREAM,0);
    if(sockfd == -1)
    {
        return -1;
    }

    struct sockaddr_in saddr;
    memset(&saddr,0,sizeof(saddr));
    saddr.sin_family = AF_INET;
    saddr.sin_port = htons(6000);
    saddr.sin_addr.s_addr = inet_addr("127.0.0.1");

    int res = bind(sockfd,(struct sockaddr*)&saddr,sizeof(saddr));
    if(res == -1)
    {
        return -1;
    }

    listen(sockfd,LIS_MAX);
    return sockfd;
}

int main()
{
    int sockfd = create_socket();
    assert(sockfd != -1);

    while(1)
    {
        struct sockaddr_in caddr;
        int len = sizeof(caddr);
        int c = accept(sockfd,(struct sockaddr*)&caddr,&len);
        if(c<0)
        {
            continue;
        }
        printf("accept c =%d\n",c);
        thread_start(c);
    }
}
//==========thread.h===========
# include <stdio.h>
# include <stdlib.h>
# include <assert.h>
# include <string.h>
# include <unistd.h>
# include <sys/socket.h>
# include <netinet/in.h>
# include <arpa/inet.h>
# include <pthread.h>
# include <fcntl.h>
# include <openss/md5.h>

void thread_start(int c);
void fun_md5(unsigned char md[]);
//==========thread.c============
# include "thread.h"
# define MAX_ARGS 10
# define MD5_LEN 16
# define BUFF_SIZE 1024*16

void printf_md5(unsigned char md[])
{
    int i=0;
    for(;i<MD5_LEN;i++)
    {
        printf("%02x",md[i]);
    }
    printf("\n");
}
void fun_md5(int fd)
{
    MD5_CTX ctx;
    unsigned char md[MD5_LEN]={0};
    MD5_init(&ctx);

    unsigned long len =0;
    char buff[BUFF_SIZE];
    while((len = read(fd,buff,BUFF_SIZE))>0)
    {
        MD5_Update(&ctx,buff,len);
    }
        MD5_Final(md,&ctx);

        print_md5(md);
}
void send_file(int c,char *name)
{
    if(name == NULL)
    {
        send(c,"err:no file name!",17,0);
        return;
    }
    int fd = open(name,O_RDONLY);
    if(fd == -1)
    {
        send(c,"err:no found file!",20,0);
        return;
    }
     int size = lseek(fd,0,SEEK_END);

     lseek(fd,0,SEEK_SET);
     char res_buff[64] = {0};
     sprintf(res_buff,"ok#%d",size);
     send(c,res_buff,strlen(res_buff),0);
     char cli_status[32] = {0};
     if(recv(c,cli_status,31,0)<=0)
     {
         return;
     }
     if(strcmp(cli_status,"ok")!=0)
     {
         return;
     }
     char data[512] = {0};
     int num =0;
     while((num = read(fd,data,512))>0)
     {
         send(c,data,num,0);
     }
     close(fd);
     printf("down finish\n");
}
void recv_file(int c,char* name)
{
    char cli_status[32] = {0};
    if(recv(c,cli_status,31,0)<=0)
    {
        printf("cli close!\n");
        return;
    }
    send(c,"ok",2,0);
   if(recv(c,cli_status,31,0)!=0)
    {
        if(strncmp(cli_status,"md5#",3)==0)
        {
            int i=0;
            pid_t f = fork();
            if(f == 0)
            {
                execvp(f,"ls");
            }

            for(;;i++)
            {
                char* fmd5=fun_md5();
                if(strncmp(cli_status+3,fmd5,MD5_LEN)==0)
                {
                    send(sockfd,"accept!",7,0);
                    break;
                }
            }

        }
        printf("%s\n",cli_status);
        return;
    }

    int size =0;
    sscanf(cli_status+3,"%d",&size);
    printf("file:%s,size:%d\n",name,size);
    int fd = open(name,O_CREAT|O_WRONLY,0600);
    if(fd == -1)
    {
        send(c,"err",3,0);
        return;
    }
    char data[512] = {0};
    int num =0;
    int curr_size =0;
    while((num = recv(c,data,512,0))>0)
    {
        write(fd,data,num);
        curr_size = curr_size + num;
        float f = curr_size*100.0/size;
        if(curr_size >= size)
        {
            break;
        }
    }
    close(fd);
}

void* work_thread(void* arg)
{
    int c = (int)arg;
    while(1)
    {
        char buff[128] = {0};
        if(recv(c,buff,127,0)<=0)
        {
            break;
        }
        printf("buff(%d)=%s\n",c,buff);
        char *myargv[MAX_ARGS] = {0};
        char *ptr = NULL;
        char *s = strtok_r(buff," ",&ptr);
        int i = 0;
        while(s != NULL)
        {
            myargv[i++] = s;
            s = strtok_r(NULL," ",&ptr);
        }
        if(myargv[0] == NULL)
        {
            send(c,"ok#No cmd!",10,0);
            continue;
        }
        if(strcmp(myargv[0],"get") == 0)
        {
            send_file(c,myargv[1]);
        }
        else if(strcmp(myargv[0],"put")==0)
        {
            if(myargv[1] == NULL)
            {
                printf("no filename!\n");
                continue;
            }
            send(c,buff,strlen(buff),0);
            recv_file(c,myargv[1]);
        }
        else
        {
            int pipefd[2];
            pipe(pipefd);
            pid_t pid = fork();
            assert(pid != -1);
            if(pid ==0)
            {
                dup2(pipefd[1],1);
                dup2(pipefd[1],2);
                execvp(myargv[0],myargv);
                perror("execvp error");
                exit(0);
            }
            close(pipefd[1]);
            wait(NULL);
            char readbuff[1024] = {"ok#"};
            read(pipefd[0],readbuff+3,1020);

            send(c,readbuff,strlen(readbuff),0);
        }
    }
    printf("one client over\n");
}

void thread_start(int c)
{
        pthread_t id;
        pthread_create(&id,NULL,work_thread,(void*)c);
}
//==========Makefile文件===========
all:ser
ser:ser.o thread.o
	gcc -o ser ser.o thread.o -lpthread
ser.o:ser.c
	gcc -c ser.c
thread.o:thread.c
	gcc -c thread.c -g
clean:
	rm -rf *.o ser
